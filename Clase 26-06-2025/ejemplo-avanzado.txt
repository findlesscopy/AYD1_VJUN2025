# -----------------DEFINICIÓN DE STAGES--------------------
stages:
  - build
  - test
  - deploy

# -----------------BUILD--------------------
build:example:
  stage: build
  script:
    - echo "---------------INICIO DE COMPILACIÓN DE CAPA MEDIA--------------------"
    # Verifica si hay contenedores en ejecución antes de detenerlos
    - if [ "$(docker ps -q)" ]; then docker stop $(docker ps -aq); fi
    # Elimina todos los contenedores y volúmenes no utilizados para liberar espacio
    - docker system prune -a -f
    # Inicia sesión en DockerHub de forma segura
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
    # Construye la imagen
    - docker build -t "$DOCKER_USER/ayd1-cicd-backend" ./backend
    # Publica la imagen en DockerHub
    - docker push "$DOCKER_USER/ayd1-cicd-backend"
    # Construye la imagen del frontend
    - docker build -t "$DOCKER_USER/ayd1-cicd-frontend" ./frontend
    # Publica la imagen del frontend en DockerHub
    - docker push "$DOCKER_USER/ayd1-cicd-frontend"

    - echo "---------------FINAL DE COMPILACIÓN DE CAPA MEDIA--------------------"
  tags:
    - prueba-cicd
  only:
    refs:
      - main

# -----------------TEST--------------------
test:example:
  stage: test
  needs: ["build:example"]
  script:
    - echo "---------------INICIO DE TEST--------------------"

    - node -v
    - npm -v

    - cd ./backend
    - npm install
    - npm test

    - echo "---------------FINAL DE TEST--------------------"
  tags:
    - prueba-cicd
  only:
    refs:
      - main


# -----------------DEPLOY--------------------
deploy:deploy_app:
  stage: deploy
  needs: ["test:example"]
  script:
    - echo "---------------INICIO DE DEPLOY--------------------"

    # Inicia sesión en DockerHub
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin

    # Limpia contenedores detenidos
    - docker container prune -f

    # Descarga las imágenes necesarias
    - docker pull "$DOCKER_USER/ayd1-cicd:latest"
    - docker pull "$DOCKER_USER/ayd1-cicd-frontend:latest"

    # Verifica si docker-compose.yml existe, si no lo escribes aquí
    - |
      cat <<EOF > docker-compose.yml
      services:
        backend:
          image: findlesscopy/ayd1-cicd-backend:latest
          container_name: backend
          ports:
            - "3001:3001"
          environment:
            DB_HOST: 34.56.214.36
            DB_USER: root
            DB_PASSWORD: ${DB_PASSWORD}
            DB_DATABASE: EjemploAYD1
            DB_PORT: 3306
          networks:
            - ayd1_network
        frontend:
          image: findlesscopy/ayd1-cicd-frontend:latest
          container_name: frontend
          ports:
            - "3000:3000"
          environment:
            VITE_BACKEND_URL: http://34.71.220.211:3001
          networks:
            - ayd1_network
          depends_on:
            - backend
      networks:
        ayd1_network:
          driver: bridge
      EOF

    # Elimina los servicios existentes si los hay
    - docker compose down || true

    # Levanta los servicios en segundo plano
    - docker compose up -d --remove-orphans

    - echo "---------------FINAL DE DEPLOY--------------------"
  tags:
    - prueba-cicd
  only:
    refs:
      - main